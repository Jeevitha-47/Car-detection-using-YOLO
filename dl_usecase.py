# -*- coding: utf-8 -*-
"""dl usecase.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ipY-ItVq-A3WcSm5wm9qfWiE5wz_Fr5
"""

!wget https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt -O yolov8n.pt

!wget -O /content/coco.names https://raw.githubusercontent.com/pjreddie/darknet/master/data/coco.names

from google.colab import files
uploaded = files.upload()

!pip install ultralytics opencv-python

import numpy as np
import os
import cv2
import time
from ultralytics import YOLO

# Step 6: Define parameters for the detection
CONFIDENCE = 0.5  # Confidence threshold for detections
font_scale = 1
thickness = 1

# Step 7: Load the YOLOv8 model
model = YOLO("yolov8n.pt")

# Step 8: Load all class labels (objects)
labels = open("/content/coco.names").read().strip().split("\n")

# Step 9: Generate random colors for each object for later plotting
colors = np.random.randint(0, 255, size=(len(labels), 3), dtype="uint8")

# Step 10: Read the uploaded image
image_path = list(uploaded.keys())[0]  # Get the uploaded file name (e.g., 'car.jpg')
image = cv2.imread(image_path)

# Step 11: Check if the image is loaded correctly
if image is None:
    raise FileNotFoundError(f"Error: Unable to load image from {image_path}. Please check the file path.")

# Extract the image name and extension
file_name = os.path.basename(image_path)  # "car.jpg"
filename, ext = file_name.split(".")  # "car", "jpg"

# Step 12: Measure how long the inference takes
start = time.perf_counter()

# Step 13: Run inference on the image using YOLOv8 model
results = model.predict(image, conf=CONFIDENCE)[0]

# Step 14: Calculate time taken for inference
time_took = time.perf_counter() - start
print(f"Time took: {time_took:.2f}s")
print(results.boxes.data)

# Step 15: Loop over the detections and draw bounding boxes on the image
for data in results.boxes.data.tolist():
    xmin, ymin, xmax, ymax, confidence, class_id = list(map(int, data[:4])) + [data[4], int(data[5])]

    # Draw a bounding box and label on the image
    color = [int(c) for c in colors[class_id]]
    cv2.rectangle(image, (xmin, ymin), (xmax, ymax), color=color, thickness=thickness)

    # Create label text (class name and confidence score)
    text = f"{labels[class_id]}: {confidence:.2f}"

    # Calculate text width & height for drawing the background box
    (text_width, text_height) = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, fontScale=font_scale, thickness=thickness)[0]
    text_offset_x = xmin
    text_offset_y = ymin - 5
    box_coords = ((text_offset_x, text_offset_y), (text_offset_x + text_width + 2, text_offset_y - text_height))

    # Create an overlay for the background of the text
    overlay = image.copy()
    cv2.rectangle(overlay, box_coords[0], box_coords[1], color=color, thickness=cv2.FILLED)

    # Add opacity to the overlay
    image = cv2.addWeighted(overlay, 0.6, image, 0.4, 0)

    # Put the text label on the image
    cv2.putText(image, text, (xmin, ymin - 5), cv2.FONT_HERSHEY_SIMPLEX, fontScale=font_scale, color=(0, 0, 0), thickness=thickness)

# Step 16: Display the output image with detected objects
from google.colab.patches import cv2_imshow
cv2_imshow(image)
cv2.waitKey(0)

# Step 17: Save the output image with detections
cv2.imwrite(filename + "_yolo8." + ext, image)